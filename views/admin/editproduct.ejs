<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ChronoX - Edit Product</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/editproduct.css">
    <style>
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
            display: none;
            z-index: 1000;
            font-family: Arial, sans-serif;
            color: white;
            background-color: #4CAF50;
        }

        .error-message {
            color: red;
            font-size: 12px;
        }

        .preview-container {
            max-width: 100px;
            margin: 10px 0;
            position: relative;
        }

        .remove-btn {
            position: absolute;
            top: 0;
            right: 0;
            background: red;
            color: white;
            border: none;
            cursor: pointer;
        }

        .sidebar {
            width: var(--sidebar-width);
            background-color: white;
            border-right: 1px solid var(--border-color);
            height: 100vh;
            position: fixed;
            left: 0;
            top: 0;
            z-index: 10;
            transition: var(--transition);
            display: flex;
            flex-direction: column;
            width: 235px;
        }
        
        .sidebar-header {
            padding: 20px;
            border-bottom: 1px solid var(--border-color);
        }
        
        .logo {
            font-size: 24px;
            font-weight: bold;
            color: var(--text-color);
        }
        
        .nav-items {
            flex: 1;
            padding: 20px 0;
            overflow-y: auto;
        }
        
        .nav-item {
            display: flex;
            align-items: center;
            padding: 12px 20px;
            color: var(--text-secondary);
            text-decoration: none;
            transition: var(--transition);
            margin-bottom: 5px;
            cursor: pointer;
        }
        
        .nav-item:hover, .nav-item.active {
            background-color: var(--primary-light);
            color: var(--primary-color);
            border-left: 3px solid var(--primary-color);
        }
        
        .nav-item i {
            margin-right: 12px;
            width: 20px;
            text-align: center;
            font-size: 18px;
        }
        
        .sidebar-footer {
            padding: 20px;
            border-top: 1px solid var(--border-color);
        }
        
        .account-btn, .logout-btn {
            display: block;
            width: 100%;
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 4px;
            text-align: center;
            cursor: pointer;
            transition: var(--transition);
            font-weight: 500;
        }
        
        .account-btn {
            background-color: white;
            color: var(--text-color);
            border: 1px solid var(--border-color);
        }
        
        .account-btn:hover {
            background-color: #f3f4f6;
        }
        
        .logout-btn {
            background-color: #111827;
            color: white;
            border: none;
        }
        
        .logout-btn:hover {
            background-color: #000;
        }
    </style>
</head>

<body>
    <button class="menu-toggle" id="menuToggle">
        <i class="fas fa-bars"></i>
    </button>

        <div class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <div class="logo">
                <span class="logo-text">Chrono</span>X
            </div>
        </div>
        
                <div class="nav-items">
            <a href="/admin/dashboard" class="nav-item ">
                <i class="fas fa-tachometer-alt"></i>
                <span>Dashboard</span>
            </a>
            <a href="/admin/product" class="nav-item active">
                <i class="fas fa-box"></i>
                <span>Products</span>
            </a>
            <a href="/admin/orders" class="nav-item">
                <i class="fas fa-list"></i>
                <span>Order List</span>
            </a>
            <a href="/admin/returns" class="nav-item">
                <i class="fas fa-undo"></i>
                <span>Returns</span>
            </a>
            <a href="/admin/userlist" class="nav-item">
                <i class="fas fa-user"></i>
                <span>Customer</span>
            </a>
            <a href="/admin/sales-report" class="nav-item">
                <i class="fas fa-chart-line"></i>
                <span>Sales Report</span>
            </a>
            <a href="/admin/category" class="nav-item">
                <i class="fas fa-tags"></i>
                <span>Category</span>
            </a>
            <a href="/admin/coupon" class="nav-item">
                <i class="fas fa-ticket-alt"></i>
                <span>Coupons</span>
            </a>
            <a href="/admin/category-offers" class="nav-item">
                <i class="fas fa-percent"></i>
                <span>Category Offers</span>
            </a>
            <a href="/admin/referrals" class="nav-item">
                <i class="fas fa-users"></i>
                <span>Referrals</span>
            </a>
        </div>
        

        <div class="sidebar-footer">
            <button class="account-btn">Account</button>
            <a href="/admin/logout" style="text-decoration-line: none;"><button class="logout-btn">Logout</button></a>
        </div>
    </div>


    <div class="main-content">
        <div class="header">
            <div class="page-title">Edit Product</div>
            <a href="/admin/product"><button class="action-btn">Back to Products</button></a>
        </div>

        <form id="editProductForm" method="put" action="/admin/product/edit/<%= product._id %>"
            enctype="multipart/form-data">
            <input type="hidden" name="productId" value="<%= product._id %>">
            <div class="card">
                <h3 class="card-title">Product Details</h3>
                <div class="form-group">
                    <label class="form-label" for="productName">Product Name</label>
                    <input type="text" class="form-control" id="productName" placeholder="Enter product name"
                        name="name" value="<%= product.name %>">
                    <div class="error-message" id="productNameError"></div>
                </div>
                <div class="form-group">
                    <label class="form-label" for="description">Description</label>
                    <textarea class="form-control" id="description" placeholder="Enter product description"
                        name="description"><%= product.description %></textarea>
                    <div class="error-message" id="descriptionError"></div>
                </div>
                <div class="form-group">
                    <label class="form-label" for="brand">Brand</label>
                    <input type="text" class="form-control" id="brand" placeholder="Enter brand name" name="brand"
                        value="<%= product.brand %>">
                    <div class="error-message" id="brandError"></div>
                </div>
                <!-- <div class="form-group">
                    <label class="form-label" for="offer">Offer</label>
                    <input type="text" class="form-control" id="offer" placeholder="Enter offer details" name="offer"
                        value="<%= product.offer || '' %>">
                    <div class="error-message" id="offerError"></div>
                </div> -->
                <div class="form-group">
                    <label class="form-label" for="model">Model</label>
                    <input type="text" class="form-control" id="model" placeholder="Enter model" name="model"
                        value="<%= product.model %>">
                    <div class="error-message" id="modelError"></div>
                </div>
                <div class="grid-2">
                    <div class="form-group">
                        <label class="form-label" for="regularPrice">Price</label>
                        <input type="number" class="form-control" id="regularPrice" placeholder="0.00"
                            name="regularPrice" value="<%= product.variants[0].regularPrice %>">
                        <div class="error-message" id="regularPriceError"></div>
                    </div>
                    <div class="form-group">
                        <label class="form-label" for="salePrice">Sale Price</label>
                        <input type="number" class="form-control" id="salePrice" placeholder="0.00" name="salePrice"
                            value="<%= product.variants[0].salePrice %>">
                        <div class="error-message" id="salePriceError"></div>
                    </div>
                </div>
                <div class="form-group">
                    <label class="form-label" for="quantity">Stock</label>
                    <input type="text" class="form-control" id="quantity" placeholder="Enter stock quantity"
                        name="quantity" value="<%= product.variants[0].quantity %>">
                    <div class="error-message" id="stockError"></div>
                </div>
            </div>

            <div class="card">
                <h3 class="card-title">Product Images</h3>
               <div class="image-upload-container">
  
                <div class="main-image-upload">
                    <label class="form-label">Main Product Image</label>
                    <div class="upload-box main-upload" id="mainImageBox">

                    <% if (product.images && product.images.length > 0 && product.images[0].public_id) { %>
                        <div class="preview-container">
                        <img src="https://res.cloudinary.com/<%= cloudName %>/image/upload/<%= product.images[0].public_id %>"
                            alt="<%= product.name %>"
                            onerror="this.src='/images/placeholder.jpg'">
                        <button type="button" class="remove-btn" onclick="removeImage(this)">Remove</button>
                        </div>
                    <% } else { %>
                        <div class="preview-container">
                        <img src="/images/placeholder.jpg" alt="No Image">
                        </div>
                    <% } %>

                    <input type="file" name="mainImage" accept="image/*" id="mainImageInput">
                    </div>
                    <div class="error-message" id="mainImageError"></div>
                </div>

                
                <div>
                    <label class="form-label">Additional Images</label>
                    <div class="additional-images" style="display: flex; gap: 20px; flex-wrap: wrap;">

                    <% for (let i = 0; i < 3; i++) { %>
                        <div class="upload-box additional-upload" id="additionalImageBox<%= i + 1 %>"
                            style="position: relative; width: 150px; height: 150px; border: 1px dashed #ccc; display: flex; align-items: center; justify-content: center;">
                        <input type="file" name="additionalImages" accept="image/*"
                                id="additionalImageInput<%= i + 1 %>"
                                style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; opacity: 0; cursor: pointer;">

                        <% if (product.images && product.images[i + 1] && product.images[i + 1].public_id) { %>
                            <div class="preview-container" style="text-align: center;">
                            <img src="https://res.cloudinary.com/<%= cloudName %>/image/upload/<%= product.images[i + 1].public_id %>"
                                alt="Additional Image"
                                style="width: 100%; height: 100%; object-fit: cover;"
                                onerror="this.src='/images/placeholder.jpg'" />
                                <input type="hidden" name="imagesToRemove" id="imagesToRemove">
                            <button type="button" class="remove-btn" onclick="removeImage(this)"
                                    style="position: absolute; top: 5px; right: 5px; background-color: red; color: white; border: none; padding: 2px 6px; cursor: pointer;">Remove</button>
                            </div>
                        <% } else { %>
                            <i class="fas fa-plus" style="color: gray; font-size: 24px;"></i>
                        <% } %>

                        </div>
                    <% } %>

                    </div>
                </div>
                </div>


                <div class="card">
                    <h3 class="card-title">Product Specifications</h3>
                    <div class="form-group">
                        <label class="form-label" for="category">Category</label>
                        <select name="category" id="category" class="form-control">
                            <% if (product.categoryId) { %>
                                <option value="<%= product.categoryId._id %>" selected>
                                    <%= product.categoryId.name %>
                                </option>
                            <% } else { %>
                                <option disabled selected>[Deleted Category]</option>
                            <% } %>

                            <% categories.forEach(element => { %>
                                <% if (!product.categoryId || product.categoryId._id.toString() !== element._id.toString()) { %>
                                    <option value="<%= element._id %>">
                                        <%= element.name %>
                                    </option>
                                <% } %>
                            <% }) %>
                        </select>
                        <div class="error-message" id="categoryError"></div>
                    </div>
                    <div class="form-group">
                        <label class="form-label" for="additionalInfo">Additional Information</label>
                        <textarea class="form-control" id="additionalInfo"
                            placeholder="Enter any additional information"
                            name="additionalInfo"><%= product.additionalInfo || '' %></textarea>
                        <div class="error-message" id="additionalInfoError"></div>
                    </div>
                </div>

                <div class="button-container">
                    <button type="button" class="btn btn-secondary"
                        onclick="window.location.href='/admin/product'">Cancel</button>
                    <button type="submit" class="btn btn-primary">Update Product</button>
                </div>
        </form>
    </div>

    <div id="cropperModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; 
        background: rgba(0,0,0,0.8); justify-content:center; align-items:center; z-index:9999;">
        <div style="background:#fff; padding:20px; max-width:600px; width:100%; position:relative;">
            <img id="cropperImage" style="max-width:100%; max-height:500px;">
            <div style="margin-top:10px; text-align:right;">
                <button id="cropConfirm" class="btn btn-primary">Crop & Save</button>
                <button id="cropCancel" class="btn btn-secondary">Cancel</button>
            </div>
        </div>
    </div>

    <div id="toast" class="toast"></div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
    <script>
        let activeInput = null;
        let cropper = null;

        // Initialize drag and drop
        function initializeDragAndDrop(uploadBox, input) {
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                uploadBox.addEventListener(eventName, preventDefaults, false);
            });

            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }

            uploadBox.addEventListener('drop', (e) => {
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    input.files = files;
                    input.dispatchEvent(new Event('change'));
                }
            });

            uploadBox.addEventListener('click', () => {
                input.click();
            });
        }

        // Handle image preview and cropping
        document.querySelectorAll('input[type="file"]').forEach(input => {
            const uploadBox = input.parentElement;
            initializeDragAndDrop(uploadBox, input);

            input.addEventListener('change', (e) => {
                const file = e.target.files[0];
                if (!file) return;

                const existingPreview = uploadBox.querySelector('.preview-container');
                if (existingPreview) existingPreview.remove();

                const reader = new FileReader();
                reader.onload = function (event) {
                    activeInput = input;
                    const modal = document.getElementById('cropperModal');
                    const cropImg = document.getElementById('cropperImage');
                    cropImg.src = event.target.result;
                    modal.style.display = 'flex';

                    if (cropper) cropper.destroy();
                    cropper = new Cropper(cropImg, {
                        aspectRatio: 1,
                        viewMode: 1,
                        autoCropArea: 0.8,
                        responsive: true,
                        cropBoxResizable: true,
                        dragMode: 'move',
                        background: false,
                        minContainerWidth: 200,
                        minContainerHeight: 200
                    });
                };
                reader.readAsDataURL(file);
            });
        });

        // Crop confirm
        document.getElementById('cropConfirm').addEventListener('click', () => {
            if (!cropper || !activeInput) return;

            cropper.getCroppedCanvas({
                width: 800,
                height: 800,
                imageSmoothingQuality: 'high'
            }).toBlob((blob) => {
                const fileName = activeInput.files[0]?.name || `cropped_${Date.now()}.jpg`;
                const croppedFile = new File([blob], fileName, { type: 'image/jpeg' });
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(croppedFile);
                activeInput.files = dataTransfer.files;

                const uploadBox = activeInput.parentElement;
                const previewContainer = document.createElement('div');
                previewContainer.className = 'preview-container';
                const previewImg = document.createElement('img');
                previewImg.src = URL.createObjectURL(blob);
                const removeBtn = document.createElement('button');
                removeBtn.textContent = 'Remove';
                removeBtn.className = 'remove-btn';

                removeBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    previewContainer.remove();
                    activeInput.value = '';
                });

                previewContainer.appendChild(previewImg);
                previewContainer.appendChild(removeBtn);
                uploadBox.appendChild(previewContainer);

                closeModal();
            }, 'image/jpeg', 0.9);
        });


        document.getElementById('cropCancel').addEventListener('click', () => {
            if (activeInput) activeInput.value = '';
            closeModal();
        });

        function closeModal() {
            const modal = document.getElementById('cropperModal');
            modal.style.display = 'none';
            if (cropper) {
                cropper.destroy();
                cropper = null;
            }
            activeInput = null;
        }


        function removeImage(button) {
            const previewContainer = button.parentElement;
            const uploadBox = previewContainer.parentElement;
            const input = uploadBox.querySelector('input[type="file"]');
            input.value = '';
            previewContainer.remove();
        }

        const form = document.getElementById('editProductForm');

        if (!form) {
            console.error('Form with ID "editProductForm" not found');
        } else {
            

            form.addEventListener('submit', async (e) => {
                e.preventDefault();


                let isValid = true;


                const clearError = (id) => {
                    const el = document.getElementById(id);
                    if (el) {
                        el.textContent = '';
                        el.style.display = 'none';
                    }
                };

                const showError = (id, message) => {
                    const el = document.getElementById(id);
                    if (el) {
                        el.textContent = message;
                        el.style.display = 'block';
                    }
                };


                const getInputValue = (id) => document.getElementById(id)?.value.trim() || '';

                const productName = getInputValue('productName');
                const description = getInputValue('description');
                const brand = getInputValue('brand');
                // const offer = getInputValue('offer');
                const model = getInputValue('model');
                const regularPrice = parseFloat(getInputValue('regularPrice'));
                const salePrice = parseFloat(getInputValue('salePrice'));
                const quantity = parseInt(getInputValue('quantity'));
                const category = getInputValue('category');
                const additionalInfo = getInputValue('additionalInfo');

                const errorFields = [
                    'productNameError', 'descriptionError', 'brandError',
                    'modelError', 'regularPriceError', 'salePriceError', 'stockError',
                    'categoryError', 'additionalInfoError'
                ];
                errorFields.forEach(clearError);

                const originalProdName = "<%= product.name%>";
                const orginaldescription ="<%= product.description%>";
                const orginalbrand ="<%= product.brand%>";
                const orginalmodel="<%= product.model%>";
                const orginalregularPrice = parseFloat("<%= product.variants[0].regularPrice %>");
                const orginalsalePrice = parseFloat("<%= product.variants[0].salePrice %>");
                const orginalquantity = parseInt("<%= product.variants[0].quantity %>");
                const orginalcategory="<%= product.categoryId._id%>";
                const orginaladditionalInfo="<%= product.additionalInfo%>";

                const isSameAsOriginal = 
                productName.trim().toLowerCase() === originalProdName.trim().toLowerCase() &&
                description.trim().toLowerCase() === orginaldescription.trim().toLowerCase() &&
                brand.trim().toLowerCase() === orginalbrand.trim().toLowerCase() &&
                model.trim().toLowerCase() === orginalmodel.trim().toLowerCase() &&
                regularPrice === orginalregularPrice &&
                salePrice === orginalsalePrice &&
                quantity === orginalquantity &&
                category.trim().toLowerCase() === orginalcategory.trim().toLowerCase() &&
                additionalInfo.trim().toLowerCase() === orginaladditionalInfo.trim().toLowerCase();



                if(isSameAsOriginal){
                    showToast("No changes made to update",'info');
                    return
                }

                if (!productName) {
                    showError('productNameError', 'Product name is required');
                    isValid = false;
                } else if (productName.length < 3 || productName.length > 100) {
                    showError('productNameError', 'Product name must be 3-100 characters');
                    isValid = false;
                } else if (!/^[a-zA-Z0-9\s\-]+$/.test(productName)) {
                    showError('productNameError', 'Product name can only contain letters, numbers, spaces, and hyphens');
                    isValid = false;
                }


                if (!description) {
                    showError('descriptionError', 'Description is required');
                    isValid = false;
                } else if (description.length < 10 || description.length > 1000) {
                    showError('descriptionError', 'Description must be 10-1000 characters');
                    isValid = false;
                }


                if (!brand) {
                    showError('brandError', 'Brand is required');
                    isValid = false;
                } else if (brand.length < 2 || brand.length > 50) {
                    showError('brandError', 'Brand must be 2-50 characters');
                    isValid = false;
                } else if (!/^[a-zA-Z\s]+$/.test(brand)) {
                    showError('brandError', 'Brand can only contain letters and spaces');
                    isValid = false;
                }


                // if (offer && !/^[a-zA-Z0-9\s%\-]+$/.test(offer)) {
                //     showError('offerError', 'Offer can only contain letters, numbers, spaces, %, and hyphens');
                //     isValid = false;
                // }


                if (!model) {
                    showError('modelError', 'Model is required');
                    isValid = false;
                } else if (model.length < 2 || model.length > 50) {
                    showError('modelError', 'Model must be 2-50 characters');
                    isValid = false;
                } else if (!/^[a-zA-Z0-9\s\-]+$/.test(model)) {
                    showError('modelError', 'Model can only contain letters, numbers, spaces, and hyphens');
                    isValid = false;
                }


                if (isNaN(regularPrice) || regularPrice <= 0) {
                    showError('regularPriceError', 'Regular price must be a positive number');
                    isValid = false;
                } else if (regularPrice > 1000000) {
                    showError('regularPriceError', 'Regular price cannot exceed 1,000,000');
                    isValid = false;
                }


                if (isNaN(salePrice) || salePrice <= 0) {
                    showError('salePriceError', 'Sale price must be a positive number');
                    isValid = false;
                } else if (salePrice > 1000000) {
                    showError('salePriceError', 'Sale price cannot exceed 1,000,000');
                    isValid = false;
                } else if (salePrice > regularPrice) {
                    showError('salePriceError', 'Sale price must be less than regular price');
                    isValid = false;
                }


                if (isNaN(quantity) || quantity < 0) {
                    showError('stockError', 'Stock must be a non-negative number');
                    isValid = false;
                }


                if (!category) {
                    showError('categoryError', 'Category is required');
                    isValid = false;
                }


                if (additionalInfo && additionalInfo.length > 1000) {
                    showError('additionalInfoError', 'Additional info cannot exceed 1000 characters');
                    isValid = false;
                }



                if (isValid) {
                    try {
                        const formData = new FormData(form);
                        const response = await fetch(form.action, {
                            method: 'PUT',
                            body: formData
                        });


                        const data = await response.json();


                        if (response.ok && data.success) {
                            showToast(data.message || 'Product updated successfully');
                            setTimeout(() => {
                                window.location.href = '/admin/product';
                            }, 2000);
                        } else {
                            showToast(data.message || 'Failed to update product', 'error');
                        }
                    } catch (error) {
                        console.error('Fetch error:', error);
                        showToast('Network error: Failed to update product');
                    }
                }
            });
        }

        function showToast(message = 'Product updated successfully!') {
            const toast = document.getElementById('toast');
            toast.textContent = message;
            toast.style.display = 'block';
            setTimeout(() => {
                toast.style.display = 'none';
                window.location.href = '/admin/product';
            }, 3000);
        }

        document.getElementById('menuToggle').addEventListener('click', () => {
            document.getElementById('sidebar').classList.toggle('active');
        });
    </script>
</body>

</html>